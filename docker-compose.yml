services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_VERSION: 20
    container_name: stories_collector_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://stories_user:stories_pass@postgres:5432/stories_collector?schema=public
      REDIS_URL: redis://redis:6379
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stories_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:16-alpine
    container_name: stories_collector_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: stories_user
      POSTGRES_PASSWORD: stories_pass
      POSTGRES_DB: stories_collector
      POSTGRES_INITDB_ARGS: "-E UTF8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - stories_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stories_user -d stories_collector"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: stories_collector_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - stories_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Optional: Prisma Studio for database management
  prisma-studio:
    image: node:20-alpine
    container_name: stories_collector_studio
    working_dir: /app
    command: sh -c "apk add --no-cache openssl && npx prisma studio --port 5555 --hostname 0.0.0.0"
    environment:
      DATABASE_URL: postgresql://stories_user:stories_pass@postgres:5432/stories_collector?schema=public
    volumes:
      - ./prisma:/app/prisma:ro
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
    ports:
      - "5555:5555"
    depends_on:
      - postgres
    networks:
      - stories_network
    profiles:
      - tools

networks:
  stories_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local